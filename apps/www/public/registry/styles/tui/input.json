{
  "name": "input",
  "files": [
    {
      "name": "input.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Icon, IconType } from \"./icon\"\nimport { colors } from \"./helper/types\"\n\nconst inputVariants = cva(\n  \"block border-0  shadow-sm ring-inset focus:outline-none \",\n\n  {\n    variants: {\n      variant: {\n        destructive: \" border border-destructive  text-destructive placeholder:text-destructive/50 \",\n        default: \"border bg-background\",\n      },\n      inputSize: {\n        default: \"w-full py-1.5 pl-3 text-sm leading-6 \"\n      },\n      round: {\n        default: \"rounded-md \",\n        roundedPill: \"rounded-full px-4\",\n        button: \"rounded-none rounded-l-md \",\n        roundForButton: \"rounded-l-lg\"\n\n      },\n      labelAndBorderStyle: {\n        innerBorder: \"min-w-0 flex-1 rounded-none rounded-r-md border-l-0 \",\n        iconWithLabel: \"pl-10 \",\n        leadingDropdown: \"pl-[5rem] \",\n        labelInside: \"pt-10\",\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      inputSize: \"default\",\n      round: \"default\"\n    },\n\n  }\n)\n\nconst inputGroupLabelVariant = cva(\n  \"block font-medium leading-6 \",\n  {\n    variants: {\n      size: {\n        xs: \"text-xs\",\n        default: \"text-sm \",\n        m: \"text-base\",\n        lg: \"text-lg\",\n        xl: \"text-xl\"\n\n      },\n    },\n    defaultVariants: {\n      size: \"default\"\n    }\n  }\n)\n\nconst keyboardVariant = cva(\n  \"inline-flex items-center border  px-1 font-sans \",\n  {\n    variants: {\n      keyboardvariant: {\n        default: \"bg-primary text-primary-foreground\",\n        destructive: \"bg-destructive text-destructive-foreground\",\n        outline: \"border border-input bg-background hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground\",\n      },\n      size: {\n        default: \"text-xs\",\n        sm: \"text-sm \",\n        m: \"text-base\",\n        lg: \"text-lg\",\n        xl: \"text-xl\"\n      },\n      round: {\n        default: \"rounded\"\n      }\n    },\n    defaultVariants: {\n      keyboardvariant: \"outline\",\n      round: \"default\",\n      size: \"default\"\n    }\n  }\n)\nconst InputGroupButtonVariant = cva(\n  \"relative -ml-px inline-flex items-center gap-x-1.5 rounded-r-md p-2 font-semibold\",\n  {\n    variants: {\n      buttonvariant: {\n        default: \"bg-primary text-primary-foreground\",\n        destructive: \"bg-destructive text-destructive-foreground\",\n        outline: \"border border-input bg-background hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground\",\n\n      },\n      fontSize: {\n        default: \"text-sm\"\n      }\n    },\n    defaultVariants: {\n      buttonvariant: \"outline\",\n      fontSize: \"default\"\n    }\n  }\n)\n\ntype InputProps = {\n  asChild?: boolean | undefined;\n  note?: string | undefined;\n  hint?: string | undefined;\n  bottomBorder?: boolean | undefined;\n  label?: string | undefined;\n  trailingAddOn?: boolean | undefined;\n  options?: string[] | undefined;\n  borderInside?: string | undefined;\n  addOnLabel?: string | undefined;\n  buttonLabel?: string | undefined;\n  icon?: IconType | undefined;\n  iconStyle?: string | undefined;\n  keyboardName?: string | undefined;\n  alignDropdown?: \"prefix\" | \"suffix\";\n  labelAlign?: \"left\" | \"over\" | \"inside\";\n  alignIcon?: \"left\" | \"right\";\n  color?: colors;\n}\n\nconst Input = React.forwardRef<\n  HTMLInputElement,\n  React.InputHTMLAttributes<HTMLInputElement> &\n  VariantProps<typeof inputVariants> &\n  InputProps>(({ className, name, keyboardName, alignIcon, iconStyle, icon, borderInside, color, labelAlign, buttonLabel, trailingAddOn, options, variant, placeholder, label, labelAndBorderStyle, alignDropdown, addOnLabel, hint, bottomBorder, disabled, round, note, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"input\"\n    const fontColor = (color?: colors) => {\n      return `text-${color}-500`\n    }\n    return (\n      <div className=\"relative\">\n        {\n          (labelAlign === \"over\" || labelAlign === \"left\") && (<label className={cn(\"flex items-end justify-between\", (inputGroupLabelVariant({}), className))}>{label}\n            {hint && (<span className={cn(fontColor(color), className)}>{hint}</span>)}\n          </label>\n          )\n        }\n        <div className={cn(\"relative mt-2 flex items-center rounded-md shadow-sm\", className)}>\n\n          {(borderInside === \"withBorder\") ?\n            <div className={cn(\"flex max-w-md rounded-l-md shadow-sm\", className)}>\n              <span className={cn(\"flex select-none items-center rounded-l-md border border-r-0 py-2 pl-3 pr-1 text-sm \", (fontColor(color)), className)}{...props}>{addOnLabel}</span> </div>\n            : (borderInside === \"withoutBorder\") ?\n              <span className={cn(\"inline-flex  items-center rounded-l-md border  border-r-0 px-3 py-2 text-sm\", className)}{...props}>\n                {addOnLabel}</span> : null\n          }\n          {icon ? <Icon name={icon} className={cn(`${alignIcon === \"left\" ? \"absolute left-0 flex items-center pl-3\" : \" absolute right-0 flex items-center pl-3 pr-2\"} ${iconStyle}`, fontColor(color), className)} {...props} /> : null}\n          {\n            alignDropdown && (\n              <div className={cn(`absolute text-sm ${alignDropdown === 'prefix' ? 'left-0' : 'right-0 '} flex items-center`, className)} {...props}>\n                <select className={cn(`${alignDropdown === 'prefix' ? 'pl-2 ' : 'pr-1'} bg-inherit`, fontColor(color), className)}>\n                  {options && options.map((option: string, index: number) => (\n                    <option key={index}>{option}</option>\n                  ))}\n                </select>\n              </div>\n            )\n          }\n          {labelAlign === \"inside\" ? (\n            <label className={cn(\"pointer-events-none absolute left-2 top-2 pl-1.5 text-sm\", fontColor(color), className)} >\n              {label}\n            </label>\n          ) : null}\n          <Comp\n            className={cn(inputVariants({ round, labelAndBorderStyle, variant, }), className)}\n            placeholder={placeholder}\n            disabled={disabled}\n            ref={ref}\n            {...props}\n          />\n          {\n            buttonLabel && (\n              <button type=\"button\" className={cn(InputGroupButtonVariant({}))}>\n                {icon && <Icon name=\"arrow-up-wide-short-regular\" className={cn(`${iconStyle}`, fontColor(color), className)} {...props} />}\n                {buttonLabel}\n              </button>\n            )\n          }\n          {trailingAddOn && (\n            <div className={cn(\"pointer-events-none flex items-center\", className)}>\n              <div className={cn(\"-ml-8 flex items-center justify-center\", className)}>\n                <span className={cn(\"text-sm\", fontColor(color), className)}>{addOnLabel}</span>\n              </div>\n            </div>\n          )}\n          {keyboardName && (\n            <div className={cn(\"absolute inset-y-0 right-0 flex items-center py-1.5 pr-1.5 \", className)}>\n              <kbd className={cn(\"inline-flex items-center py-0.5\", keyboardVariant({}), className)} {...props}>{keyboardName}</kbd>\n            </div>\n          )}\n        </div>\n\n\n        {bottomBorder ? <div className={cn(\"absolute inset-x-0 bottom-0 border peer-focus:border peer-focus:border-t-2\", className)} {...props} /> : \"\"}\n\n        {note && <span className={cn(\"text-sm\", fontColor(color), className)} {...props}>{note}</span>}\n\n      </div>\n    )\n  })\nInput.displayName = \"Input\"\n\nexport { Input, inputVariants }\n"
    }
  ],
  "type": "components:ui"
}