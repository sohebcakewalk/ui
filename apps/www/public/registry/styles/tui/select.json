{
  "name": "select",
  "dependencies": [
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "name": "select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/tui/ui/avatar\"\nimport { Icon } from \"./icon\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\ntype IconAlignment = 'left' | 'right';\ninterface SelectMenuProps {\n  menuList: { label: string, value: string, imagePath?: string, status?: boolean, secondaryText?: string }[],\n  alignIcon?: IconAlignment,\n  avatarActive?: boolean,\n  statusIndicator?: boolean,\n  secondaryActive?: boolean\n}\n\ntype SelectItemProps = {\n  menuData?: { label: string, value: string, imagePath?: string, status?: boolean, secondaryText?: string },\n  alignIcon?: IconAlignment,\n  avatarActive?: boolean,\n  statusIndicator?: boolean,\n  secondaryActive?: boolean\n} & React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <Icon name=\"chevron-down-solid\" className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n        \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n          \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  SelectItemProps // Use the SelectItemProps type here\n>((props, ref) => {\n  const { className, children, menuData, alignIcon = \"left\", avatarActive = false, statusIndicator = false, secondaryActive = false, ...rest } = props;\n  return (\n    <SelectPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n        className\n      )}\n      {...rest}\n      title={statusIndicator ? (menuData?.status ? \"online\" : \"offline\") : menuData?.value}\n    >\n      <span className={`absolute flex h-3.5 w-3.5 items-center justify-center ${alignIcon === \"right\" ? \"right-2\" : \"left-2\"}`}>\n        <SelectPrimitive.ItemIndicator>\n          <Icon name=\"check-solid\" className=\"h-4 w-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>\n        <div className=\"flex items-center\">\n          {statusIndicator &&\n            <span\n              className={cn(\n                'mr-2 inline-block h-2 w-2 shrink-0 rounded-full',\n                menuData?.status ? 'bg-green-400' : 'bg-gray-200'\n              )}\n            >\n            </span>\n          }\n          {avatarActive &&\n            <Avatar className=\"mr-2 h-8 w-8\">\n              <AvatarImage src={menuData?.imagePath} alt={menuData?.value} />\n              <AvatarFallback>CW</AvatarFallback>\n            </Avatar>\n          }\n          {children}\n          {secondaryActive && <span\n            className={cn(\n              'ml-4 truncate text-gray-500',\n              children === menuData?.value ? 'text-indigo-200' : 'text-gray-500'\n            )}\n          >\n            {menuData?.secondaryText}\n          </span>}\n        </div>\n      </SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n});\n\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n}\n"
    }
  ],
  "type": "components:ui"
}