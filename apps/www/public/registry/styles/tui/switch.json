{
  "name": "switch",
  "dependencies": [
    "@radix-ui/react-switch"
  ],
  "files": [
    {
      "name": "switch.tsx",
      "content": "\"use client\"\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { cva } from \"class-variance-authority\"\nimport { CardDescription } from \"./card\"\nimport { Label } from \"./label\"\nimport { useState } from 'react'\nimport { Icon, IconType } from \"./icon\"\n\nconst switchVariants = cva(\n  \"peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent h-[24px] w-[44px]\",\n        short:\n          \"bg-transparent hover:bg-accent h-[14px] w-[34px]\",\n        icon:\n          \"bg-transparent hover:bg-accent h-[24px] w-[44px]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst switchBallVariants = cva(\n  \"pointer-events-none block rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background h-5 w-5\",\n        short:\n          \"h-5 w-5 data-[state=checked]:translate-x-3 data-[state=unchecked]:-translate-x-1 shadow-sm border\",\n        icon:\n          \"bg-background h-5 w-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n\n\nconst CoreSwitch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  {\n    variant?: \"default\" | \"short\" | \"icon\" | null | undefined,\n    iconLeft?: IconType,\n    iconRight?: IconType,\n    iconLeftClassName?: string\n    iconRightClassName?: string\n  } &\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, variant = \"default\", iconLeft, iconRight, iconLeftClassName, iconRightClassName, ...props }, ref) => {\n  const uniqueNumber = (Math.floor(Math.random() * 10000))?.toString()\n  const [isChecked, setIsChecked] = useState<boolean>(false || props?.value ? true : false);\n\n  React.useEffect(() => {\n    const element: any = document.getElementById(uniqueNumber)\n    if (element[\"data-state\"] === \"unchecked\") {\n      setIsChecked(false)\n    } else {\n      setIsChecked(true)\n    }\n  }, [document])\n\n  React.useEffect(() => {\n    setIsChecked(Boolean(props.value));\n  }, [props.value]);\n\n  return (\n    <SwitchPrimitives.Root\n      className={cn(switchVariants({ variant, className }))}\n      {...props}\n      ref={ref}\n    >\n      <SwitchPrimitives.Thumb\n        className={cn(switchBallVariants({ variant, className }))}\n        id={uniqueNumber}\n      >\n        {variant === \"icon\" ? (\n          <div className=\"flex items-center h-full justify-center\">\n            <Icon\n              name={iconLeft || \"xmark-solid\"}\n              className={cn(\n                \"w-1/2 h-1/2 text-muted-accent\",\n                iconLeftClassName ?? \"\",\n                isChecked && \"hidden\"\n              )}\n            />\n            <Icon\n              name={iconRight || \"check-solid\"}\n              className={cn(\n                \"w-1/2 h-1/2 text-muted-accent\",\n                iconRightClassName ?? \"\",\n                !isChecked && \"hidden\"\n              )}\n            />\n          </div>\n        ) : null}\n      </SwitchPrimitives.Thumb>\n    </SwitchPrimitives.Root>\n  );\n});\n\nCoreSwitch.displayName = SwitchPrimitives.Root.displayName;\n\ntype SwitchModifiedTypes = {\n  className?: string;\n  variant?: \"default\" | \"short\" | \"icon\" | null | undefined;\n  label?: string;\n  description?: string;\n  alignment?: \"left\" | \"right\" | \"top\" | \"bottom\";\n  inline?: boolean;\n  props?: any,\n  iconLeft?: IconType,\n  iconRight?: IconType,\n  iconLeftClassName?: string,\n  iconRightClassName?: string\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchModifiedTypes &\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, variant, label, description, alignment, inline, iconLeft, iconRight, iconLeftClassName, iconRightClassName, ...props }, ref) => {\n  return (\n    <>\n      {(label || description) && (alignment === undefined || alignment === \"left\" || alignment === \"right\") ?\n        <div className='flex space-x-4 justify-center items-center pt-3 pb-6 flex-wrap'>\n          {alignment === \"left\" &&\n            <CoreSwitch\n              aria-label=\"Default Toggle\"\n              iconLeft={iconLeft} iconLeftClassName={iconLeftClassName}\n              iconRight={iconRight} iconRightClassName={iconRightClassName}\n              {...props} className={className} variant={variant} ref={ref}\n            />}\n          <div className={`${inline ? \"flex space-x-2 items-center\" : \"\"}`}>\n            <Label>{label}</Label>\n            <CardDescription>{description}</CardDescription>\n          </div>\n          {(alignment === \"right\" || !alignment) && <CoreSwitch aria-label=\"Default Toggle\" {...props} className={className} variant={variant} ref={ref} />}\n        </div>\n        : (label || description) && alignment === undefined || alignment === \"top\" || alignment === \"bottom\" ?\n          <div className=\"w-full justify-center flex\">\n            <div>\n              {alignment === \"top\" && <CoreSwitch aria-label=\"Default Toggle\"\n                iconLeft={iconLeft} iconLeftClassName={iconLeftClassName}\n                iconRight={iconRight} iconRightClassName={iconRightClassName}\n                {...props} className={className} variant={variant} ref={ref}\n              />}\n              <div className={`${inline ? \"flex space-x-2 items-center my-2\" : \"\"} w-full`}>\n                <Label>{label}</Label>\n                <CardDescription>{description}</CardDescription>\n              </div>\n              {alignment === \"bottom\" && <CoreSwitch aria-label=\"Default Toggle\"\n                iconLeft={iconLeft} iconLeftClassName={iconLeftClassName}\n                iconRight={iconRight} iconRightClassName={iconRightClassName}\n                {...props} className={className} variant={variant} ref={ref} />\n              }\n            </div>\n          </div>\n          :\n          <CoreSwitch aria-label=\"Default Toggle\"\n            iconLeft={iconLeft} iconLeftClassName={iconLeftClassName}\n            iconRight={iconRight} iconRightClassName={iconRightClassName}\n            {...props} className={className} variant={variant} ref={ref}\n          />\n      }\n    </>\n  )\n})\n\nexport { Switch }\n"
    }
  ],
  "type": "components:ui"
}