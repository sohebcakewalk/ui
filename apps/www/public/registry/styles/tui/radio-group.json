{
  "name": "radio-group",
  "dependencies": [
    "@radix-ui/react-radio-group"
  ],
  "files": [
    {
      "name": "radio-group.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { CardDescription } from \"./card\"\nimport { Label } from \"./label\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>, {\n    label?: string;\n    description?: string;\n    inline?: boolean\n    showDivider?: boolean,\n    groupItems?: RadioGroupItemProps[]\n  } &\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, label, description, inline, showDivider, groupItems, ...props }, ref) => {\n  const groupClassName = cn(\"grid gap-2\", className, inline && \"flex space-x-2 items-center\")\n  return (\n    <div>\n      {(label || description) && <div className=\"py-2\">\n        {label && <Label className=\"text-lg w-full font-semibold\">{label}</Label>}\n        {description && <CardDescription className=\"text-sm w-full font-light\">{description}</CardDescription>}\n      </div>}\n      {showDivider && <hr />}\n      {!groupItems ? <RadioGroupPrimitive.Root className={groupClassName} {...props} ref={ref} /> : null}\n      {groupItems && <RadioGroupPrimitive.Root className={groupClassName} {...props} ref={ref}>\n        {groupItems?.map((item, index) => {\n          return (\n            <RadioGroupItem {...item} key={index} />\n          )\n        })}\n      </RadioGroupPrimitive.Root>}\n    </div >\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst CoreRadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  { fillColor?: string } &\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ fillColor, className, children, ...props }, ref) => {\n  return (\n    <span className=\"relative flex\">\n      <RadioGroupPrimitive.Item\n        ref={ref}\n        className={cn(\n          \"aspect-square rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n          fillColor ? `bg-${fillColor} border-none focus:ring-0 focus:ring-ring h-6 w-6` : \"h-4 w-4\"\n        )}\n        {...props}\n      >\n        <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n          <Circle className={cn(`${fillColor ? `rounded-full text-${fillColor} absolute h-10 w-10` : \"fill-current text-current h-2.5 w-2.5 \"} `)} />\n        </RadioGroupPrimitive.Indicator>\n      </RadioGroupPrimitive.Item>\n    </span>\n  )\n})\nCoreRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\n\ntype RadioGroupItemProps = {\n  label?: string;\n  description?: string;\n  alignment?: \"left\" | \"right\";\n  inline?: boolean;\n  header?: string;\n  headerDescription?: string;\n  fillColor?: string;\n  showDivider?: boolean;\n} & React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  RadioGroupItemProps\n>(({ className, children, label, description, alignment, inline, header, headerDescription, showDivider, fillColor, ...props }, ref): any => {\n  return (\n    <div className=\"space-y-2 w-full mx-auto\">\n      {header || headerDescription && <div>\n        {header && <p className=\"text-md w-full font-semibold\">{header}</p>}\n        {headerDescription && <p className=\"text-md w-full font-light\">{headerDescription}</p>}\n      </div>}\n      <div className={`flex items-center w-full text-sm leading-6 ${alignment === \"right\" && \"justify-between\"}`}>\n        {alignment === \"left\" || !alignment ?\n          <CoreRadioGroupItem className={className + \" mr-2\"} children={children} {...props} ref={ref} fillColor={fillColor} /> : null}\n        {label && <Label htmlFor={props?.id} className={`${!inline ? \"w-full whitespace-nowrap\" : \"mr-1\"} text-sm font-medium leading-6`}>{label}</Label>}\n        {inline && description && <CardDescription className=\"text-sm\">{description}</CardDescription>}\n        {alignment === \"right\" ? <CoreRadioGroupItem className={className} children={children} {...props} ref={ref} fillColor={fillColor} /> : null}\n      </div>\n      {!inline && description && <CardDescription className={`${alignment === \"right\" ? \"\" : \"ml-6\"} text-sm`}>{description}</CardDescription>}\n      {showDivider && <div className=\"py-2\"><hr /></div>}\n    </div >\n  )\n})\n\nexport { RadioGroup, RadioGroupItem }\n"
    }
  ],
  "type": "components:ui"
}