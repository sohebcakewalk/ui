{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\n\nimport { Icon, IconType } from \"./icon\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center text-sm font-medium shadow-sm ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        soft:\n          \"text-black-foreground hover:bg-indigo/90 bg-primary-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        xs: \"px-2 py-1 text-xs\",\n        sm: \"px-2 py-1 text-sm\",\n        default: \"px-2.5 py-1.5 text-sm\",\n        lg: \"px-3 py-2 text-sm\",\n        xl: \"px-3.5 py-2.5 text-sm\",\n        icon: \"h-10 w-10\",\n      },\n      rounded: {\n        sm: \"rounded-sm\",\n        md: \"rounded-md\",\n        lg: \"rounded-lg\",\n        xl: \"rounded-xl\",\n        none: \"rounded-none\",\n        full: \"rounded-full\",\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      rounded: \"md\"\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n  VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  icon?: IconType;\n  alignIcon?: \"left\" | \"right\";\n  iconStyle?: string;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, icon, alignIcon, iconStyle, rounded, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className, rounded }))}\n        ref={ref}\n        {...props}\n      >\n        <div className=\"flex flex-row items-center\">\n          {icon && typeof icon === \"string\" && icon?.length > 0 && <Icon className={`${alignIcon === \"right\" ? \"order-2 ml-2\" : \"mr-2\"} ${iconStyle}`} name={icon} />}\n          {props.children}\n        </div>\n      </Comp>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"
    }
  ],
  "type": "components:ui"
}