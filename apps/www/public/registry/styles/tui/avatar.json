{
  "name": "avatar",
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "files": [
    {
      "name": "avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { colors } from \"./helper/types\"\n\nconst avatarVariants = cva(\n  \"bg-muted\",\n  {\n    variants: {\n      variant: {\n        circular: \"flex shrink-0 overflow-hidden rounded-full\",\n        rounded: \"flex shrink-0 overflow-hidden rounded-md\",\n        dotCircular: \"relative inline-block rounded-full\",\n        dotRounded: \"relative inline-block rounded-md\",\n        ring: \"flex shrink-0 overflow-hidden rounded-full ring-2 ring-white\"\n      },\n      size: {\n        xs: \"h-6 w-6 text-xs\",\n        sm: \"h-8 w-8 text-sm\",\n        md: \"h-10 w-10\",\n        lg: \"h-12 w-12 text-lg\",\n        xl: \"h-14 w-14 text-xl\"\n      },\n    },\n    defaultVariants: {\n      variant: \"circular\",\n      size: \"md\"\n    }\n  }\n)\n\nexport interface AvatarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof avatarVariants> {\n  src?: string;\n  alt?: string;\n  color?: colors;\n}\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  AvatarProps\n>(({ variant, size, className, children, src, alt, color, ...props }, ref) => {\n  const dotColor = (color?: colors) => {\n    return `absolute right-0 top-0 block h-2 w-2 rounded-full bg-${color}-400 ring-2 ring-white z-20`\n  }\n  return (\n    <AvatarPrimitive.Root\n      ref={ref}\n      className={cn(\n        avatarVariants({ variant, size }), 'inline-block',\n        className\n      )}\n      {...props}\n    >\n      {src && <AvatarPrimitive.Image\n        className={cn(avatarVariants({ variant, size }), className)}\n        src={src}\n        alt={alt}\n      />}\n      <AvatarPrimitive.Fallback\n        className={cn(\n          \"flex h-full w-full items-center justify-center rounded-full\"\n        )}\n      >\n        {children}\n      </AvatarPrimitive.Fallback>\n      {(variant === \"dotCircular\" || variant === \"dotRounded\") && <span className={dotColor(color)} />}\n    </AvatarPrimitive.Root>\n  )\n})\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
    }
  ],
  "type": "components:ui"
}