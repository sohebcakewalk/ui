{
  "name": "textarea",
  "files": [
    {
      "name": "textarea.tsx",
      "content": "import React, { useState, useCallback } from 'react';\nimport { cva, type VariantProps, } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\nimport { Icon, IconType } from \"./icon\"\nimport { Input } from './input';\n\n\nconst textAreaVariants = cva(\n  \"block w-full rounded-md border-0 py-1.5 pl-3  ring-1 ring-inset focus:ring-2 focus:ring-inset \",\n  {\n    variants: {\n      variant: {\n        outline:\n          \"border border-input placeholder:text-gray focus:ring-0 ring-0 \"\n\n      },\n      size: {\n        xs: \"text-xs leading-4 \",\n        sm: \"text-sm leading-5 \",\n        default: \"text-base leading-6 \",\n        lg: \"text-lg leading-7 \",\n        xl: \"text-xl leading-8 \"\n      },\n      textareavariant: {\n        default: \"resize-none p-0 pb-2 ring-0 focus:ring-0 border-b-4 \",\n        borderForInput: \"resize-none  py-0 border-t-0 border-b-0 border-l-0 border-r-0\",\n      }\n    },\n    defaultVariants: {\n      variant: \"outline\",\n      size: \"default\"\n    },\n  }\n)\nconst textAreaButtonVariants = cva(\n  \" rounded-md px-3 py-1.5 font-medium\",\n  {\n    variants: {\n      textAreaButtonvariant: {\n        outline: \" border-input \",\n      },\n      size: {\n        xs: \"text-xs leading-4 \",\n        sm: \"text-sm leading-5 \",\n        default: \"text-base leading-6 \",\n        lg: \"text-lg leading-7 \",\n        xl: \"text-xl leading-8 \"\n      },\n      showMoodButton: {\n        default: \"relative py-0 px-0 -m-2 inline-flex h-6 w-10 items-center justify-center rounded-full \",\n        resultButton: \"inline-flex items-center py-2 font-semibold shadow-sm  focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 \"\n      },\n    },\n    defaultVariants: {\n      textAreaButtonvariant: \"outline\",\n      size: \"default\"\n    },\n  }\n)\n\nconst textAreaImageVariants = cva(\n  \"  flex-shrink-0 rounded-full\",\n  {\n    variants: {\n\n      size: {\n        xs: \"h-3 w-3 rounded-full \",\n        sm: \"h-4 w-4 rounded-full \",\n        default: \"h-5 w-5 rounded-full \",\n        lg: \"h-6 w-6 rounded-full \",\n        xl: \"h-7 w-7 rounded-full \"\n      },\n\n    },\n    defaultVariants: {\n      size: \"default\"\n    },\n  }\n)\n\nconst textAreaListVariants = cva(\n  \" absolute right-0 z-10 mt-1 overflow-auto rounded-lg py-3 shadow\",\n  {\n    variants: {\n      size: {\n        default: \" w-52 text-sm \",\n      },\n    },\n    defaultVariants: {\n      size: \"default\"\n    },\n  }\n)\n\ninterface AssignListItem {\n  label?: string | undefined;\n  image?: string | undefined;\n}\n\ninterface IconList {\n  icon?: IconType;\n  bg?: string;\n  height?: string;\n  width?: string;\n}\ninterface LabelListItem {\n  label?: string;\n}\ninterface DueDateListItem {\n  label?: string;\n}\ninterface IconButton {\n  bg?: string;\n  label?: string;\n  icon?: string;\n  height?: string;\n  width?: string;\n}\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  VariantProps<typeof textAreaVariants> {\n  asChild?: boolean;\n  label?: string | undefined;\n  image?: string | undefined;\n  showIconForTextArea?: boolean | undefined;\n  writeButton?: string | undefined;\n  previewButton?: string | undefined;\n  submitButton?: string | undefined;\n  showMoodButton?: 'default' | \"resultButton\";\n  textAreaButtonvariant?: \"outline\" | \"gray\";\n  placeholder?: string | undefined;\n  variant?: 'outline';\n  textareavariant?: 'default' | 'borderForInput';\n  icons?: IconType[] | undefined;\n  icon?: IconType | undefined;\n  titlePlaceholder?: string | undefined;\n  hasDivider?: boolean | undefined;\n  assignList?: AssignListItem[] | undefined;\n  assignButtonName?: string | undefined;\n  labelButtonName?: string | undefined;\n  labelList?: LabelListItem[] | undefined;\n  dueDateButtonName?: string | undefined;\n  dueDateList?: DueDateListItem[] | undefined;\n  attachIcon?: IconType | undefined;\n  attachFileName?: string | undefined;\n  iconButton?: IconButton[] | undefined;\n  previewContent?: string | undefined;\n  createButton?: string | undefined;\n  iconStyle?: string | undefined;\n  widthForUl?:string | undefined;\n  submitButtonName?: string | undefined;\n  color?: \"black\" | \"white\" | \"slate\" | \"gray\" | \"zinc\" | \"neutral\" | \"stone\" |\n  \"red\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"green\" | \"emerald\" | \"teal\" | \"cyan\"\n  | \"sky\" | \"blue\" | \"indigo\" | \"violet\" | \"purple\" | \"fuchsia\" | \"pink\" | \"rose\";\n}\n\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, showIconForTextArea,widthForUl, color, submitButtonName, iconButton, iconStyle, createButton, attachFileName, previewContent, labelList, attachIcon, dueDateList, dueDateButtonName, assignList, labelButtonName, assignButtonName, hasDivider, titlePlaceholder, icon, variant, icons, textareavariant, placeholder, showMoodButton, textAreaButtonvariant, previewButton, submitButton, writeButton, label, ...props }, ref) => {\n    const [showComment, setShowComment] = useState(false);\n    const [showWrite, setShowWrite] = useState(false);\n    const [showIcon, setShowIcon] = useState(false);\n    const [selectedIcon, setSelectedIcon] = useState<IconList | null>(null);\n    const [isListVisible, setIsListVisible] = useState(false);\n    const [isLabelListVisible, setIsLabelListVisible] = useState(false);\n    const [isDueDateListVisible, setIsDueDateListVisible] = useState(false);\n    const [selectedOption, setSelectedOption] = useState<AssignListItem | null>(null);\n    const [selectedLabelOption, setSelectedLabelOption] = useState<LabelListItem | null>(null);\n    const [selectedDueDateOption, setSelectedDueDateOption] = useState<DueDateListItem | null>(null);\n\n    const memoizedSetShowComment = useCallback((value: boolean) => setShowComment(value), []);\n    const memoizedSetShowWrite = useCallback((value: boolean) => setShowWrite(value), []);\n    const memoizedSetSelectedIcon = useCallback((value: IconList) => setSelectedIcon(value), []);\n    const memoizedSetSelectedOption = useCallback((value: AssignListItem) => setSelectedOption(value), []);\n    const memoizedSetSelectedLabelOption = useCallback((value: LabelListItem) => setSelectedLabelOption(value), []);\n    const memoizedSetSelectedDueDateOption = useCallback((value: DueDateListItem) => setSelectedDueDateOption(value), []);\n\n\n    const buttonColor = (color?: string) => {\n      return ` bg-${color}-600 text-white`\n    }\n\n    const memoizedHandleCommentButtonClick = useCallback(() => {\n      memoizedSetShowComment(true);\n      memoizedSetShowWrite(false);\n    }, [memoizedSetShowComment, memoizedSetShowWrite]);\n    \n    const memoizedHandleWriteButtonClick = useCallback(() => {\n      memoizedSetShowWrite(true);\n      memoizedSetShowComment(false);\n    }, [memoizedSetShowWrite, memoizedSetShowComment]);\n    \n    const memoizedHandleIconClick = useCallback(() => {\n      setShowIcon(prev => !prev);\n    }, []);\n    \n    const memoizedHandleIconButtonClick = useCallback((icon:any) => {\n      memoizedSetSelectedIcon(icon);\n      memoizedHandleIconClick();\n    }, [memoizedSetSelectedIcon, memoizedHandleIconClick]);\n    \n    const memoizedToggleListVisibility = useCallback(() => {\n      setIsListVisible(prev => !prev);\n      setIsLabelListVisible(false);\n      setIsDueDateListVisible(false);\n    }, []);\n    \n    const memoizedHandleOptionClick = useCallback((option:any) => {\n      memoizedSetSelectedOption(option);\n      memoizedToggleListVisibility();\n    }, [memoizedSetSelectedOption, memoizedToggleListVisibility]);\n    \n    const memoizedToggleLabelListVisibility = useCallback(() => {\n      setIsLabelListVisible(prev => !prev);\n      setIsListVisible(false);\n      setIsDueDateListVisible(false);\n    }, []);\n    \n    const memoizedHandleLabelOptionClick = useCallback((option:any) => {\n      memoizedSetSelectedLabelOption(option);\n      memoizedToggleLabelListVisibility();\n    }, [memoizedSetSelectedLabelOption, memoizedToggleLabelListVisibility]);\n    \n    const memoizedToggleDueDateListVisibility = useCallback(() => {\n      setIsDueDateListVisible(prev => !prev);\n      setIsListVisible(false);\n      setIsLabelListVisible(false);\n    }, []);\n    \n    const memoizedHandleDueDateOptionClick = useCallback((option:any) => {\n      memoizedSetSelectedDueDateOption(option);\n      memoizedToggleDueDateListVisibility();\n    }, [memoizedSetSelectedDueDateOption, memoizedToggleDueDateListVisibility]);\n    \n\n    return (\n      <>\n        <div className={cn(\"flex items-start space-x-4\", className)}>\n          {\n            props.image ?\n              <div className={cn(\"flex-shrink-0\")}>\n                <img className={cn(\"inline-block\", (textAreaImageVariants({})), className)} src={props.image} />\n              </div>\n              : \"\"\n          }\n          <div className={cn(\"min-w-0 flex-1\", className)}>\n            {\n              writeButton ?\n                <div className={cn(\"flex items-center\", className)}>\n                  <button\n                    className={cn(textAreaButtonVariants({}))}\n                    onClick={memoizedHandleWriteButtonClick}>\n                    {writeButton}\n                  </button>\n\n                  <button\n                    className={cn(textAreaButtonVariants({}))}\n                    onClick={memoizedHandleCommentButtonClick}>\n                    {previewButton}\n                  </button>\n\n                  <div className={cn(\"ml-auto flex items-center space-x-5\", className)}>\n\n                    {showWrite && (\n                      <div className={cn(\"ml-auto flex items-center space-x-5\", className)}>\n                        {icons && icons.map((icon: IconType, index: number) => (\n                          <div key={index} className={cn(\"flex items-center\", className)}>\n                            <button\n                              className={cn(\"inline-flex items-center justify-center rounded-full\", className)} >\n                              <Icon name={icon} className={cn(`${iconStyle}`, className)} /></button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                : \"\"\n            }\n            {label ? <label className={cn(\"block leading-6 text-base\", className)}>{label}</label> : ''}\n            <div className={cn(\" rounded-lg border shadow-sm\", className)}>\n              {titlePlaceholder ? <Input className={cn(\"block border-0 shadow-none text-lg font-medium\", className)} placeholder={titlePlaceholder} /> : null}\n              {showComment && (\n                <div className={cn(\"mt-2\", className)}>\n                  <div className={cn(\" rounded-lg p-0.5\", className)}>\n                    <div className={cn(\"border-b\", className)}>\n                      <div className={cn(\"mx-px mt-px px-3 pb-12 pt-2 text-sm leading-5\", className)}>{previewContent}</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {\n                !showComment ?\n                  <textarea\n                    className={cn(\"pl-1.5\",(textAreaVariants({ variant, textareavariant })))}\n                    placeholder={placeholder}\n                    ref={ref}\n                    {...props}\n\n                  />\n                  : null\n              }\n              {\n                hasDivider ?\n                  <>\n                    <div className={cn(\"flex flex-nowrap justify-end space-x-2 px-2 py-2 sm:px-3\", className)}>\n                      <div className={cn(\"flex-shrink-0\")}>\n                        <div className={cn(\"relative\", className)}>\n                          <button className={cn(\"relative inline-flex items-center whitespace-nowrap rounded-full px-2 py-2 text-sm font-medium sm:px-3\")} onClick={memoizedToggleListVisibility}>\n                            {selectedOption ? (\n                              <>\n                                <img src={selectedOption.image} className={cn(textAreaImageVariants({}), className)} />\n                                <span className={cn(\"ml-3 block truncate font-medium\", className)}>{selectedOption.label}</span>\n                              </>\n                            ) : (\n                              <>\n                                {icon ? <Icon name={icon} className={cn(`${iconStyle}`, className)} /> : null}\n                                <span className={cn(\"hidden truncate sm:ml-2 sm:block\", className)}>{assignButtonName}</span>\n                              </>\n                            )}\n                          </button>\n                          {isListVisible && (\n                            <ul className={cn(textAreaListVariants({}), className)}>\n                              {assignList && assignList.map((option, index) => (\n                                <li\n                                  key={index}\n                                  className={cn(\" bg-white relative cursor-pointer select-none px-3 py-2\", className)}\n                                  onClick={() => memoizedHandleOptionClick(option)}>\n                                  <div className={cn(\"flex items-center\", className)}>\n                                    <img src={option.image} className={cn(textAreaImageVariants({}), className)} />\n                                    <span className={cn(\"ml-3 block truncate font-medium\", className)}>{option.label}</span>\n                                  </div>\n                                </li>\n                              ))}\n                            </ul>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className={cn(\"flex-shrink-0\", className)}>\n                        <div className={cn(\"relative\", className)}>\n                          <button className={cn(\"relative inline-flex items-center whitespace-nowrap rounded-full px-2 py-2 text-sm font-medium sm:px-3\")} onClick={memoizedToggleLabelListVisibility}>\n                            {selectedLabelOption ? (\n                              <>\n                                <span className={cn(\"ml-3 block truncate font-medium\", className)}>{selectedLabelOption.label}</span>\n                              </>\n                            ) : (\n                              <>\n                                {icon ? <Icon name={icon} className={cn(`${iconStyle}`,className)} /> : null}\n                                <span className={cn(\"hidden truncate sm:ml-2 sm:block\", className)}>{labelButtonName}</span>\n                              </>\n                            )}\n                          </button>\n                          {isLabelListVisible && (\n                            <ul className={cn(textAreaListVariants({}), className)}>\n                              {labelList && labelList.map((option, index) => (\n                                <li\n                                  key={index}\n                                  className={cn(\"bg-white relative cursor-pointer select-none px-3 py-2\", className)}\n                                  id={`listbox-option-${index}`}\n                                  role=\"option\"\n                                  onClick={() => memoizedHandleLabelOptionClick(option)}\n                                >\n                                  <div className={cn(\"flex items-center\", className)}>\n                                    <span className={cn(\"ml-3 block truncate font-medium\", className)}>{option.label}</span>\n                                  </div>\n                                </li>\n                              ))}\n                            </ul>\n                          )}\n\n                        </div>\n                      </div>\n\n                      <div className={cn(\"flex-shrink-0\", className)}>\n                        <div className={cn(\"relative\", className)}>\n                          <button className={cn(\"relative inline-flex items-center whitespace-nowrap rounded-full px-2 py-2 text-sm font-medium sm:px-3\", className)} onClick={memoizedToggleDueDateListVisibility}>\n                            {selectedDueDateOption ? (\n                              <>\n                                <span className={cn(\"ml-3 block truncate font-medium\", className)}>{selectedDueDateOption.label}</span>\n                              </>\n                            ) : (\n                              <>\n                                {icon ? <Icon name={icon} className={cn(`${iconStyle}`, className)} /> : null}\n                                <span className={cn(\"hidden truncate sm:ml-2 sm:block\", className)}>{dueDateButtonName}</span>\n                              </>\n                            )}\n                          </button>\n                          {isDueDateListVisible && (\n                            <ul className={cn(textAreaListVariants({}), className)}>\n                              {dueDateList && dueDateList.map((option, index) => (\n                                <li\n                                  key={index}\n                                  className={cn(\"bg-white relative cursor-pointer select-none px-3 py-2\", className)}\n                                  onClick={() => memoizedHandleDueDateOptionClick(option)}\n                                >\n                                  <div className={cn(\"flex items-center\", className)}>\n                                    <span className={cn(\"ml-3 block truncate font-medium\", className)}>{option.label}</span>\n                                  </div>\n                                </li>\n                              ))}\n                            </ul>\n                          )}\n\n                        </div>\n                      </div>\n                    </div>\n                    <div className={cn(\"flex items-center justify-between space-x-3 border-t border-gray-200 px-2 py-2 sm:px-3\", className)}>\n                      <div className={cn(\"flex\", className)}>\n                        <button className={cn(\"group -my-2 -ml-2 inline-flex items-center rounded-full px-3 py-2 text-left text-gray-400\", className)}>\n                          {attachIcon ? <Icon name={attachIcon} className={cn(`${iconStyle}`, className)} /> : null}\n                          <span className={cn(\"text-sm italic\", className)}>{attachFileName}</span>\n                        </button>\n                      </div>\n                      <div className={cn(\"flex-shrink-0\", className)}>\n                        <button type=\"submit\" className={cn(\"inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm \",buttonColor(color), className)}>{createButton}</button>\n                      </div>\n                    </div>\n                  </>\n                  : null\n              }\n\n            </div>\n            {\n              submitButton ?\n                <div className={cn(\"mt-2 flex justify-end\", className)}>\n                  <button type=\"submit\" className={cn(\"inline-flex items-center rounded-md  px-3 py-2 text-sm font-semibold shadow-sm \",buttonColor(color), className)}>{submitButton}</button>\n                </div> : \"\"\n            }\n            {\n              showIconForTextArea ?\n                <>\n                  <div className={cn(\"flex justify-between pt-2\", className)}>\n                    <div className={cn(\"flex items-center space-x-5\", className)}>\n                      <div className={cn(\"flex root\", className)}>\n                        <button\n                          type=\"button\" className={cn(\"inline-flex items-center justify-center rounded-full\", className)}>\n                          {attachIcon ? <Icon name={attachIcon} className={cn(`${iconStyle}`, className)} /> : null}\n                        </button>\n                      </div>\n\n                      <div className={cn(\"flex root\", className)}>\n                        {\n                          selectedIcon ? (\n                            <>\n                              <div className={cn(`${selectedIcon.bg} ${selectedIcon.height} ${selectedIcon.width} flex items-center justify-center rounded-full`, className)}>\n                                <button\n                                  className={cn(\"inline-flex items-center justify-center rounded-full\", className)} onClick={memoizedHandleIconClick}>\n                                  {selectedIcon.icon ? <Icon name={selectedIcon.icon} /> : null}\n                                </button>\n                              </div>\n                            </>\n                          ) : <>\n                            <button\n                              className={cn(\"inline-flex items-center justify-center rounded-full\", className)} onClick={memoizedHandleIconClick}>\n                              {icon ? <Icon name={icon} className={cn(`${iconStyle}`, className)} /> : null}\n                            </button>\n                          </>\n                        }\n\n\n                      </div>\n                    </div>\n\n                    <div className={cn(\"flex-shrink-0\", className)}>\n                      <button type=\"submit\" className={cn(\"rounded-md px-3 py-1.5 font-medium text-base leading-6 \",buttonColor(color),className)}>{submitButtonName}</button>\n                    </div>\n                  </div>\n                  <ul className={cn(`absolute z-10 ${widthForUl} rounded-lg text-base shadow focus:outline-none text-sm`, className)}>\n                    {showIcon && (\n                      iconButton && iconButton.map((option: any, index: number) => (\n                        <li key={index} className={cn(` relative bg-white cursor-default select-none px-3 py-2`, className)} >\n                          <div className={cn(\"flex items-center\", className)}>\n                            <div className={cn(`${option.bg} flex ${option.height} ${option.width}  items-center justify-center rounded-full`, className)}>\n                              <button onClick={() => memoizedHandleIconButtonClick(option)} >\n                                <Icon name={option.icon} className={cn(`${iconStyle}`, className)} />\n                              </button>\n                            </div>\n                            <span className={cn(\"ml-3 block truncate font-medium\", className)}>{option.label}</span>\n                          </div>\n                        </li>\n                      )))}\n                  </ul>\n                </>\n                : \"\"\n            }\n          </div>\n        </div >\n      </>\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
    }
  ],
  "type": "components:ui"
}