{
  "name": "checkbox",
  "dependencies": [
    "@radix-ui/react-checkbox"
  ],
  "files": [
    {
      "name": "checkbox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"./label\"\nimport { Icon } from \"./icon\"\n\nconst CheckboxCore = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 focus:ring-ring shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Icon name=\"check-solid\" className=\"h-3 w-3\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckboxCore.displayName = CheckboxPrimitive.Root.displayName\n\nexport { CheckboxCore }\n\ntype checkBoxType = {\n  description?: string,\n  label?: string,\n  alignment?: \"top\" | \"left\" | \"right\" | \"bottom\";\n  checkBoxClassName?: string;\n  labelClassName?: string;\n  descriptionClassName?: string;\n  inline?: boolean;\n  showDivider?: boolean;\n  className?: string;\n} &\n  React.ElementRef<typeof CheckboxPrimitive.Root>\n\n\nexport const Description = ({ description, dark = false, descriptionClassName }:\n  { description: string, dark: boolean, descriptionClassName?: string }) => {\n  return (\n    <div className=\"flex\">\n      <p className={`text-sm flex-wrap ${dark ? \"text-muted-accent\" : \"text-muted-foreground\"}`}>{description}</p>\n    </div>\n  )\n}\n\n\nexport const Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  {\n    description?: string,\n    label?: string,\n    alignment?: \"top\" | \"left\" | \"right\" | \"bottom\";\n    checkBoxClassName?: string;\n    labelClassName?: string;\n    descriptionClassName?: string;\n    inline?: boolean;\n    showDivider?: boolean;\n    className?: string;\n  } &\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ description, label, alignment, checkBoxClassName, labelClassName, inline, showDivider, descriptionClassName, ...props }, ref) => {\n  const uniqueNumber = Math.floor(Math.random() * 600)?.toString()\n  return (\n    <div className={`${alignment !== \"top\" && alignment !== \"bottom\" && !showDivider ? \"flex justify-start\" : \"\"}`}>\n      {alignment === \"top\" ? <CheckboxCore className={checkBoxClassName} {...props} id={uniqueNumber} /> : null}\n      <div className={`flex w-full ${!description ? \"\" : \"items-center\"} ${inline && \"items-center\"}`}>\n\n        {!alignment || alignment === \"left\" ? <CheckboxCore className={checkBoxClassName} {...props} id={uniqueNumber} /> : null}\n\n        <div className={`w-full ${(label && description && !inline && (!alignment || alignment === \"left\")) ? \"pt-4 ml-3\" : label && !description && !showDivider ? \"ml-2\" : \"\"} ${inline && !showDivider && \"flex ml-3 items-center\"} ${inline && showDivider && \"flex ml-3 my-3 items-center\"}`}>\n          {label && <Label className={`${labelClassName} ${inline ? \"mr-1\" : \"\"}`} htmlFor={uniqueNumber}>{label}</Label>}\n          {description && <Description description={description} dark={!label} descriptionClassName={descriptionClassName} />}\n        </div>\n\n        {alignment === \"right\" ? <div className={`flex justify-end ${(description) ? \"h-8\" : \"h-4\"}`}>\n          <CheckboxCore className={checkBoxClassName} {...props} id={props?.id ? props?.id : uniqueNumber} />\n        </div> : null}\n\n      </div>\n\n      {alignment === \"bottom\" ? <CheckboxCore className={checkBoxClassName} {...props} id={uniqueNumber} /> : null}\n\n      {showDivider && <div className='pt-3'><hr /></div>}\n    </div>\n  )\n})"
    }
  ],
  "type": "components:ui"
}